// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PureSound.Data;

#nullable disable

namespace PureSound.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240401085446_Mig5")]
    partial class Mig5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "91dba846-9346-4180-926b-822a512114a8",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "59becd7f-9fa3-4daf-99f6-f52f5568dcc6",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "389e650a-775f-4d7b-a9ac-30cfd960fa37",
                            RoleId = "91dba846-9346-4180-926b-822a512114a8"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PureSound.Data.Account.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("FavGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("~/img/profilePhoto.png");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("FavGenreId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "389e650a-775f-4d7b-a9ac-30cfd960fa37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9260676d-d699-4936-82a3-45b90d09a5fe",
                            Email = "etaleksander411@gmail.com",
                            EmailConfirmed = false,
                            FavGenreId = new Guid("48d67181-5732-47a0-892b-6577fc688e00"),
                            LockoutEnabled = false,
                            NormalizedEmail = "ETALEKSANDER411@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEO/wbIUCLYorYKU1zm/vbs6SQoDSw4wcAGhbPc9H//31+/TnwXSgazMcJx2Rj+MT7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bfcdb850-75dc-4403-8607-742547efd717",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("PureSound.Data.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("RegionId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("PureSound.Data.Entities.ArtistTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("TrackId");

                    b.ToTable("ArtistTrack");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5dc4e336-7b32-4828-a8e5-1150c547a604"),
                            Name = "Lifestyle"
                        },
                        new
                        {
                            Id = new Guid("ec44d824-670f-48d8-afc6-2920c1584451"),
                            Name = "BREAKING"
                        },
                        new
                        {
                            Id = new Guid("a5aead36-723f-4e91-8ae1-3483b1ece4e0"),
                            Name = "New production"
                        },
                        new
                        {
                            Id = new Guid("c9b55a91-c620-4b5c-816e-e9ab68891035"),
                            Name = "Rising stars"
                        });
                });

            modelBuilder.Entity("PureSound.Data.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PureSound.Data.Entities.FavouriteArtists", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("UserId1");

                    b.ToTable("FavouriteArtists");
                });

            modelBuilder.Entity("PureSound.Data.Entities.FavouriteTracks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserId1");

                    b.ToTable("FavouriteTracks");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3116896-17e0-4cc1-8ea2-701ff0c8baa3"),
                            Name = "Rap"
                        },
                        new
                        {
                            Id = new Guid("45221fad-7ad3-4e1f-a41d-24fc04d56928"),
                            Name = "Drill"
                        },
                        new
                        {
                            Id = new Guid("8fdeac7e-90f9-4734-8f59-d44158d2d47a"),
                            Name = "Raeggeton"
                        },
                        new
                        {
                            Id = new Guid("ee61b87e-2d87-4140-b27a-0ed7be2ad6cc"),
                            Name = "House"
                        },
                        new
                        {
                            Id = new Guid("73f5fff4-8993-4134-8061-06f751c57211"),
                            Name = "R&B"
                        },
                        new
                        {
                            Id = new Guid("fabc34f8-c8be-44b4-b4f1-813306d49004"),
                            Name = "Techno"
                        },
                        new
                        {
                            Id = new Guid("4b62643f-4982-40bc-ac5f-2375e079c744"),
                            Name = "Phonk"
                        },
                        new
                        {
                            Id = new Guid("48d67181-5732-47a0-892b-6577fc688e00"),
                            Name = "None"
                        });
                });

            modelBuilder.Entity("PureSound.Data.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea155cef-68a1-4729-96ff-80ffa7dab707"),
                            Name = "West Coast (NORTH AMERICA)"
                        },
                        new
                        {
                            Id = new Guid("eb407147-422b-4e1c-b4b3-02ad9c219eef"),
                            Name = "East Coast (NORTH AMERICA)"
                        },
                        new
                        {
                            Id = new Guid("606bc68c-cdb3-4182-b91d-2831f85007a6"),
                            Name = "South America"
                        },
                        new
                        {
                            Id = new Guid("d081b738-96ce-4cc5-bf00-4e02d68b9166"),
                            Name = "Latin America"
                        },
                        new
                        {
                            Id = new Guid("603adf35-6eb2-47a1-8fcb-9888ae468846"),
                            Name = "Africa"
                        },
                        new
                        {
                            Id = new Guid("59bd3803-31ec-42ec-a520-3e6959e8ec5a"),
                            Name = "Middle East (ASIA)"
                        },
                        new
                        {
                            Id = new Guid("63d604c8-d78b-44f4-a00b-024562348640"),
                            Name = "West Europe"
                        },
                        new
                        {
                            Id = new Guid("5b49776d-9219-43b8-ad7b-bd568b1053cb"),
                            Name = "East Europe"
                        },
                        new
                        {
                            Id = new Guid("e7e08a06-99c2-457b-acb4-e7b693b6ea6e"),
                            Name = "Balkans (EUROPE)"
                        },
                        new
                        {
                            Id = new Guid("0d011743-2796-4c15-b894-40beee728bcf"),
                            Name = "Oceania"
                        },
                        new
                        {
                            Id = new Guid("00fefb35-c407-4300-8927-8e43a63d25ac"),
                            Name = "East Asia"
                        },
                        new
                        {
                            Id = new Guid("bdd29e4f-631e-4d49-ab75-b26ccaeb17d5"),
                            Name = "Middle Asia"
                        },
                        new
                        {
                            Id = new Guid("305b2d56-1f6f-459c-bb47-46a24c2864f7"),
                            Name = "West Asia"
                        },
                        new
                        {
                            Id = new Guid("d07cd5fe-c2e6-46a7-87a0-2d427ea9d05a"),
                            Name = "None"
                        });
                });

            modelBuilder.Entity("PureSound.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lyrics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<string>("YouTubeURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PureSound.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PureSound.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PureSound.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PureSound.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PureSound.Data.Account.User", b =>
                {
                    b.HasOne("PureSound.Data.Entities.Genre", "FavGenre")
                        .WithMany("Users")
                        .HasForeignKey("FavGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FavGenre");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Article", b =>
                {
                    b.HasOne("PureSound.Data.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Artist", b =>
                {
                    b.HasOne("PureSound.Data.Entities.Genre", "Genre")
                        .WithMany("Artists")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PureSound.Data.Entities.Region", "Region")
                        .WithMany("Artists")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("PureSound.Data.Entities.ArtistTrack", b =>
                {
                    b.HasOne("PureSound.Data.Entities.Artist", "Artist")
                        .WithMany("ArtistTrack")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PureSound.Data.Entities.Track", "Track")
                        .WithMany("ArtistTrack")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Comment", b =>
                {
                    b.HasOne("PureSound.Data.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PureSound.Data.Account.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PureSound.Data.Entities.FavouriteArtists", b =>
                {
                    b.HasOne("PureSound.Data.Entities.Artist", "Artist")
                        .WithMany("FavoriteArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PureSound.Data.Account.User", "User")
                        .WithMany("FavouriteArtists")
                        .HasForeignKey("UserId1");

                    b.Navigation("Artist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PureSound.Data.Entities.FavouriteTracks", b =>
                {
                    b.HasOne("PureSound.Data.Entities.Track", "Track")
                        .WithMany("FavoriteTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PureSound.Data.Account.User", "User")
                        .WithMany("FavouriteTracks")
                        .HasForeignKey("UserId1");

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Track", b =>
                {
                    b.HasOne("PureSound.Data.Entities.Genre", "Genre")
                        .WithMany("Tracks")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("PureSound.Data.Account.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavouriteArtists");

                    b.Navigation("FavouriteTracks");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Artist", b =>
                {
                    b.Navigation("ArtistTrack");

                    b.Navigation("FavoriteArtists");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Genre", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Tracks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Region", b =>
                {
                    b.Navigation("Artists");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Track", b =>
                {
                    b.Navigation("ArtistTrack");

                    b.Navigation("FavoriteTracks");
                });
#pragma warning restore 612, 618
        }
    }
}
