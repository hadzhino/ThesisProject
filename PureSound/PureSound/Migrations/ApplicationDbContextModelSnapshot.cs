// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PureSound.Data;

#nullable disable

namespace PureSound.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "91dba846-9346-4180-926b-822a512114a8",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "59becd7f-9fa3-4daf-99f6-f52f5568dcc6",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "389e650a-775f-4d7b-a9ac-30cfd960fa37",
                            RoleId = "91dba846-9346-4180-926b-822a512114a8"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PureSound.Data.Account.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("FavGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("~/img/profilePhoto.png");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("FavGenreId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "389e650a-775f-4d7b-a9ac-30cfd960fa37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2cbcd2ee-af73-408e-94b5-769230f3ae54",
                            Email = "etaleksander411@gmail.com",
                            EmailConfirmed = false,
                            FavGenreId = new Guid("48d67181-5732-47a0-892b-6577fc688e00"),
                            LockoutEnabled = false,
                            NormalizedEmail = "ETALEKSANDER411@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAL1IbmRTm5tlT3KgESgIVyQWuuYuT1dkp0Tq8HWVjios4Blyle75ttmhHoh47NfWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f90bd3e-6a7c-433b-b142-236315336325",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("PureSound.Data.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("PureSound.Data.Entities.ArticleCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ArticleCategories");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("RegionId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("PureSound.Data.Entities.ArtistTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("TrackId");

                    b.ToTable("ArtistTrack");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59035821-4fcb-4315-a65e-f53407f33052"),
                            Name = "Lifestyle"
                        },
                        new
                        {
                            Id = new Guid("99960bb8-53ca-495a-9be3-929e5f2becc8"),
                            Name = "BREAKING"
                        },
                        new
                        {
                            Id = new Guid("2279afeb-9e86-478a-a14c-498677a1e0e5"),
                            Name = "New production"
                        },
                        new
                        {
                            Id = new Guid("f81cb7ce-432f-49ee-82ab-e8b1790643c7"),
                            Name = "Rising stars"
                        });
                });

            modelBuilder.Entity("PureSound.Data.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("PureSound.Data.Entities.FavouriteArtists", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("UserId1");

                    b.ToTable("FavouriteArtists");
                });

            modelBuilder.Entity("PureSound.Data.Entities.FavouriteTracks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserId1");

                    b.ToTable("FavouriteTracks");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("081a1986-3e54-4bcd-b2b3-6617e5377059"),
                            Name = "Rap"
                        },
                        new
                        {
                            Id = new Guid("89da19e1-af14-457c-bedc-1a35a75a18cf"),
                            Name = "Drill"
                        },
                        new
                        {
                            Id = new Guid("d663d434-7b2b-4eea-bda5-2540446305bd"),
                            Name = "Raeggeton"
                        },
                        new
                        {
                            Id = new Guid("a1a76027-ad95-421c-9938-d8b7e189e5b0"),
                            Name = "House"
                        },
                        new
                        {
                            Id = new Guid("ee1f87a0-cf4a-49df-8088-282b071a0466"),
                            Name = "R&B"
                        },
                        new
                        {
                            Id = new Guid("56e579c2-9f9f-4e77-a6c0-bda366ee16b0"),
                            Name = "Techno"
                        },
                        new
                        {
                            Id = new Guid("566fc94d-a901-40f6-990c-38c9d775bfea"),
                            Name = "Phonk"
                        },
                        new
                        {
                            Id = new Guid("48d67181-5732-47a0-892b-6577fc688e00"),
                            Name = "None"
                        });
                });

            modelBuilder.Entity("PureSound.Data.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea8d1995-91c5-44ad-9dcf-8b3c3aa58153"),
                            Name = "West Coast (NORTH AMERICA)"
                        },
                        new
                        {
                            Id = new Guid("1412664a-21c7-4b4b-b443-f36739bfca59"),
                            Name = "East Coast (NORTH AMERICA)"
                        },
                        new
                        {
                            Id = new Guid("5df0f3fd-ec78-4303-acff-a17982489555"),
                            Name = "South America"
                        },
                        new
                        {
                            Id = new Guid("2b3aa1ba-e141-4280-a397-97b96f85f90b"),
                            Name = "Latin America"
                        },
                        new
                        {
                            Id = new Guid("3af96622-aee5-4e15-b7ec-d4621172738e"),
                            Name = "Africa"
                        },
                        new
                        {
                            Id = new Guid("f387d1f5-93ad-478c-8b9d-c4e688938ffd"),
                            Name = "Middle East (ASIA)"
                        },
                        new
                        {
                            Id = new Guid("ff66e5af-dc77-485a-b494-44f5bca586d4"),
                            Name = "West Europe"
                        },
                        new
                        {
                            Id = new Guid("cdad4800-9eed-4755-8f4c-401efe494e4b"),
                            Name = "East Europe"
                        },
                        new
                        {
                            Id = new Guid("32a99cba-303a-4f5e-835e-6261dacfe390"),
                            Name = "Balkans (EUROPE)"
                        },
                        new
                        {
                            Id = new Guid("3e96265e-29f6-4e0e-b7c9-d5668ce446be"),
                            Name = "Oceania"
                        },
                        new
                        {
                            Id = new Guid("43609c1a-b524-4920-a635-77160af801f1"),
                            Name = "East Asia"
                        },
                        new
                        {
                            Id = new Guid("d344a779-3aed-499f-a17a-46312b2afc1c"),
                            Name = "Middle Asia"
                        },
                        new
                        {
                            Id = new Guid("c4feb616-ee63-4527-acae-d95381afdbe4"),
                            Name = "West Asia"
                        },
                        new
                        {
                            Id = new Guid("d07cd5fe-c2e6-46a7-87a0-2d427ea9d05a"),
                            Name = "None"
                        });
                });

            modelBuilder.Entity("PureSound.Data.Entities.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lyrics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<string>("YouTubeURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PureSound.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PureSound.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PureSound.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PureSound.Data.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PureSound.Data.Account.User", b =>
                {
                    b.HasOne("PureSound.Data.Entities.Genre", "FavGenre")
                        .WithMany("Users")
                        .HasForeignKey("FavGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FavGenre");
                });

            modelBuilder.Entity("PureSound.Data.Entities.ArticleCategory", b =>
                {
                    b.HasOne("PureSound.Data.Entities.Article", "Article")
                        .WithMany("ArticleCategory")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PureSound.Data.Entities.Category", "Category")
                        .WithMany("ArticleCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Artist", b =>
                {
                    b.HasOne("PureSound.Data.Entities.Genre", "Genre")
                        .WithMany("Artists")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PureSound.Data.Entities.Region", "Region")
                        .WithMany("Artists")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("PureSound.Data.Entities.ArtistTrack", b =>
                {
                    b.HasOne("PureSound.Data.Entities.Artist", "Artist")
                        .WithMany("ArtistTrack")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PureSound.Data.Entities.Track", "Track")
                        .WithMany("ArtistTrack")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Comment", b =>
                {
                    b.HasOne("PureSound.Data.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PureSound.Data.Account.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PureSound.Data.Entities.FavouriteArtists", b =>
                {
                    b.HasOne("PureSound.Data.Entities.Artist", "Artist")
                        .WithMany("FavoriteArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PureSound.Data.Account.User", "User")
                        .WithMany("FavouriteArtists")
                        .HasForeignKey("UserId1");

                    b.Navigation("Artist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PureSound.Data.Entities.FavouriteTracks", b =>
                {
                    b.HasOne("PureSound.Data.Entities.Track", "Track")
                        .WithMany("FavoriteTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PureSound.Data.Account.User", "User")
                        .WithMany("FavouriteTracks")
                        .HasForeignKey("UserId1");

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Track", b =>
                {
                    b.HasOne("PureSound.Data.Entities.Genre", "Genre")
                        .WithMany("Tracks")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("PureSound.Data.Account.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavouriteArtists");

                    b.Navigation("FavouriteTracks");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Article", b =>
                {
                    b.Navigation("ArticleCategory");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Artist", b =>
                {
                    b.Navigation("ArtistTrack");

                    b.Navigation("FavoriteArtists");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Category", b =>
                {
                    b.Navigation("ArticleCategory");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Genre", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Tracks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Region", b =>
                {
                    b.Navigation("Artists");
                });

            modelBuilder.Entity("PureSound.Data.Entities.Track", b =>
                {
                    b.Navigation("ArtistTrack");

                    b.Navigation("FavoriteTracks");
                });
#pragma warning restore 612, 618
        }
    }
}
